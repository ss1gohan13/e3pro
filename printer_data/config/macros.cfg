[pause_resume]

[display_status]

[gcode_macro G29]				
gcode:
  G28
  BED_MESH_CALIBRATE
  G1 X0 Y0 Z10 F4200

[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 200, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 250
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 95
variable_load_filament_extruder_temp: 250
variable_heat_soak_time: 1 # in minutes
gcode:

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.

    G28                   # Full home (XYZ)
    G90                   # Absolut position
    G1 X1 F6000
    G1 Y20
    G1 Z0.600 F600
    G1 Y0 F9000

    M400

    CLEAR_PAUSE

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info

    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info

    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  #G90
  #G1 X1 F6000
  #G1 Y20
  #G1 Z0.600 F600
  #G1 Y0 F9000

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150C"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info

  BED_MESH_CALIBRATE ADAPTIVE=1                # Starts bed mesh

  SMART_PART

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info

  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  
  LINE_PURGE

[gcode_macro END_PRINT]
description: 
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    M117 Finish Print!!!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enable == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 10) < z_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y210 F2000

    _ALL_FAN_OFF
    TURN_OFF_HEATERS

    M84 X Y Z E  

    M220 S100
    M221 S100

    CLEAR_PAUSE

    {action_respond_info("Finish Print!")}

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}

        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        {action_respond_info("Pause Print!")}
        
        PAUSE_BASE
        M117 Pause Print!!!
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park and
                printer.gcode_move.position.y != y_park     
        %}
            G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
                    printer['filament_switch_sensor filament_sensor'].filament_detected == True
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == True and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-50 F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+25 F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-50 F300 
                G90
            {% endif %}
        {% endif %}
    {% endif %}

[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}

[gcode_macro RESUME]
description: Pause the actual running print
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}

    {% if state == 'filament_change' %}
        {% if printer["filament_switch_sensor filament_sensor"].enable == True and
              printer["filament_switch_sensor filament_sensor"].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% else %}
                M140 S{extruder_target_temp}
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M190 S{extruder_target_temp}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% endif %}
            {action_respond_info("Print resumming!")}
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enable != True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {action_respond_info("Print resumming!")}
            G91
            G1 E{e_restract} F300
            G90
            M117 Printing now!!!
            RESUME_BASE
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE

    M117 Cancel Print!!!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            {action_respond_info("Nozzle not hot enough")}
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    M117 Ready
    {action_respond_info("Cancel Print Success!")}
    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 enclosure_temp"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}```

[gcode_macro WARMUP_CHAMBER]
variable_target_bed: 105
variable_target_hotend: 25
variable_toolhead_z: 10
gcode:
    {% set TARGET = params.TARGET | default(105) | float %}
    {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}
    SET_FAN_SPEED FAN=zerofilter SPEED=1
    M106 S255
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={[target_bed, 100]|min}
    M107
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_hotend}
    _NOTIFY_WARMUP

[gcode_macro _NOTIFY_WARMUP]
gcode:
  {action_call_remote_method("notify", name="pushover", message="Printer is warmed up.") }

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50
    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

    ;; pause the print during heat soak
    BASE_PAUSE

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak was cancelled -- also cancel the print
            CANCEL_PRINT
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak is complete. Call the complete macro prior to starting the print
            SOAK_COMPLETE
            ;; resume / start the print
            BASE_RESUME
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro RESONANCY_TEST]
gcode:

        G28

    TEST_RESONANCES AXIS=X
    TEST_RESONANCES AXIS=Y

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Retracting...
        G91
        G1 E+25 F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-50 F300 
        G90
        M400
        M117 Retract Finish
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't unload filament during printing!!!")}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Extruding...
        G91 
        G1 E45 F300
        G1 E30 F150
        G90
        M400
        M117 Extrude Finish
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't load filament during printing!!!")}
    {% endif %}

#[gcode_macro M109]
#rename_existing: M99109
#gcode:
#    #Parameters
#    {% set s = params.S|float %}
#    
#    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
#    {% endif %}

#[gcode_macro M190]
#rename_existing: M99190
#gcode:
#    #Parameters
#    {% set s = params.S|float %}
#    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
#    {% endif %}

