[gcode_macro CLEAN_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=clean_nozzle_state
    _CG28   				# home if needed
    G90
    G1 Z10 F600
    G1 X268 F3000  			# move behind brush
    G1 Z6.5 F600     			# wipe height
    {% if printer.extruder.target >= 190 and (printer.extruder.target - printer.extruder.temperature)|abs <= 5 %}
        M83
        G1 E15 F250      	# purge @ 10mm^3/s
        G1 E-2 F1000     	# retract
        G4 P2000         	# wait 2s
        G92 E0
        {% for wipes in range(3) %}   # wipe 5 times
            G1 X234 F5000
            G1 X253 F5000
        {% endfor %}
        G1 X230 F5000
    {% endif %}
    RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro G29]				
gcode:
  STATUS_LEVELING
  G28
  BED_MESH_CALIBRATE
  G1 X0 Y0 Z10 F4200
  STATUS_READY
  
[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 250, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 250
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 95
variable_load_filament_extruder_temp: 230
gcode:

[gcode_macro START_PRINT]
description: 
variable_state: 'Prepare'
variable_record_extruder_temp:0
variable_max_record_extruder_temp:0
gcode:
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}

    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set bed_targer_temp = printer.heater_bed.target|int %}

    M400

    CLEAR_PAUSE

    G90
    {% if state == 'Prepare' %}

        {action_respond_info("Prepare!")}

        {% if printer.toolhead.homed_axes|lower != "xyz" %}
            G28
        {% endif %}

        {% if printer['filament_switch_sensor filament_sensor'].enable == True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            M117 No filament!!!
            {action_respond_info("Please Insert filament in Sensor!")}
            CANCEL_PRINT
        {% endif %}

        {action_respond_info("Check Heating!")}

        M140 S{bed_targer_temp}
        M104 S{extruder_target_temp}

        {% if printer.heater_bed.temperature < bed_targer_temp %}
            M117 Bed heating...
            {action_respond_info("Bed heating...")}
            M190 S{bed_targer_temp}
        {% endif %}

        {% if printer.extruder.temperature < extruder_target_temp %}
            M117 Nozzle heating...
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_target_temp} 
        {% endif %}

        BED_MESH_CLEAR
        
        BED_MESH_CALIBRATE ADAPTIVE=1
        
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Start"' 
        UPDATE_DELAYED_GCODE ID=_print_start_wait DURATION=0.5

    {% elif state == 'Start' %}
        M117 Printing now!!!
        {action_respond_info("Start!")}
    {% endif %}

#    G1 Z5.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    #M109 S{EXTRUDER_TEMP}
#    G1 X1.0 Y20 Z2.0 F5000.0 ; Move to start position
#    G1 X1.0 Y200.0 Z0.75 F1500.0 E20 ; Draw the first line
#    G1 X1.6 Y200.0 Z0.75 F5000.0 ; Move to side a little
#    G1 X1.6 Y30 Z0.75 F1500.0 E40 ; Draw the second line
#    G92 E0
#    G1 X5 Y20 Z2.0 F3000 ; Move over to prevent blob squish and Z Axis up little to prevent scratching of Heat Bed

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        M140 S{mesh_calibrate_temp}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        M190 S{mesh_calibrate_temp}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    BED_MESH_CLEAR
    
    BED_MESH_CALIBRATE_BASE ADAPTIVE=1

    {% if current_target_temp == 0 %}
        M140 S0  
    {% endif %}

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}

[gcode_macro END_PRINT]
gcode:
    G91 # Move nozzle away from print while retracting
    G1 Z5 E-5 F1000     # Raise nozzle by 5mm andretract 10mm of filament 
    G90
    G1 X5 Y200 F3000 ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    M84 # Disable steppers

#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
## change this if you need more or less extrusion
#variable_extrude: 1.0
#gcode:
#  ##### read E from pause macro #####
#  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#  ##### set park positon for x and y #####
#  # default is your max posion from your printer.cfg
#  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#  ##### calculate save lift position #####
#  {% set max_z = printer.toolhead.axis_maximum.z|float %}
#  {% set act_z = printer.toolhead.position.z|float %}
#  {% if act_z < (max_z - 2.0) %}
#      {% set z_safe = 2.0 %}
#  {% else %}
#      {% set z_safe = max_z - act_z %}
#  {% endif %}
#  ##### end of definitions #####
#  PAUSE_BASE
#  G91
#  {% if printer.extruder.can_extrude|lower == 'true' %}
#    G1 E-{E} F2100
#  {% else %}
#    {action_respond_info("Extruder not hot enough")}
#  {% endif %}
#  {% if "xyz" in printer.toolhead.homed_axes %}
#    G1 Z{z_safe} F900
#    G90
#    G1 X{x_park} Y{y_park} F6000
#  {% else %}
#    {action_respond_info("Printer not homed")}
#  {% endif %} 

#[gcode_macro RESUME]
#description: Resume the actual running print
#rename_existing: RESUME_BASE
#gcode:
#  ##### read E from pause macro #####
#  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#  #### get VELOCITY parameter if specified ####
#  {% if 'VELOCITY' in params|upper %}
#    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#  {%else %}
#    {% set get_params = "" %}
#  {% endif %}
#  ##### end of definitions #####
#  {% if printer.extruder.can_extrude|lower == 'true' %}
#    G91
#    G1 E{E} F2100
#  {% else %}
#    {action_respond_info("Extruder not hot enough")}
#  {% endif %}  
#  RESUME_BASE {get_params}

#[gcode_macro CANCEL_PRINT]
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#gcode:
#  TURN_OFF_HEATERS
#  {% if "xyz" in printer.toolhead.homed_axes %}
#    G91
#    G1 E-5 F2700 ;Retract a bit
#    G1 E-5 Z4.5 F2400 ;Retract and raise Z
#    G1 X5 Y5 F3000 ;Wipe out
#    G90
#  {% else %}
#    {action_respond_info("Printer not homed")}
#  {% endif %}
#    G28 X Y
#  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#    G1 Y{y_park} F2000
#    M106 S0 ;Turn-off fan
#    M104 S0 ;Turn-off hotend
#    M140 S0 ;Turn-off bed
#    M84
#  CANCEL_PRINT_BASE

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 enclosure_temp"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}```

[gcode_macro WARMUP_CHAMBER]
variable_target_bed: 105
variable_target_hotend: 25
variable_toolhead_z: 10
gcode:
    {% set TARGET = params.TARGET | default(105) | float %}
    {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}
    SET_FAN_SPEED FAN=zerofilter SPEED=1
    M106 S255
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={[target_bed, 100]|min}
    M107
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_hotend}
    _NOTIFY_WARMUP

[gcode_macro _NOTIFY_WARMUP]
gcode:
  {action_call_remote_method("notify", name="pushover", message="Printer is warmed up.") }

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 105
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(95) | float %}
    {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds
#    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(250)|float %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50
    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

#    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

    ;; pause the print during heat soak
    BASE_PAUSE

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak was cancelled -- also cancel the print
            CANCEL_PRINT
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak is complete. Call the complete macro prior to starting the print
            SOAK_COMPLETE
            ;; resume / start the print
            BASE_RESUME
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

#[gcode_macro M109]
#rename_existing: M99109
#gcode:
#    #Parameters
#    {% set s = params.S|float %}
#    
#    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
#    {% endif %}

#[gcode_macro M190]
#rename_existing: M99190
#gcode:
#    #Parameters
#    {% set s = params.S|float %}
#    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
#    {% endif %}
